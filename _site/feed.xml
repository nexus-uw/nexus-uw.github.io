<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Simon Ramsay</title>
    <description>A personal blog about shitty infrequent random programing tips</description>
    <link>http://0.0.0.0:4000/</link>
    <atom:link href="http://0.0.0.0:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 20 Feb 2018 14:50:31 -0600</pubDate>
    <lastBuildDate>Tue, 20 Feb 2018 14:50:31 -0600</lastBuildDate>
    <generator>Jekyll v3.5.0</generator>
    
      <item>
        <title>Made a crummy aws cost calculator for Fargate using Preact</title>
        <description>&lt;p&gt;&lt;img src=&quot;/assets/ecs.png&quot; alt=&quot;&quot; /&gt;&lt;img src=&quot;/assets/preact.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Last month, Amazon released AWS Fargate for ECS which removed the need to manage the underling EC2s of an ECS cluster. Amazon carges by the second for this service based on vCPU + Memory, but I wanted to know the total hourly cost for this. So I made a cost calculator for it using &lt;a href=&quot;https://preactjs.com/&quot;&gt;Preact&lt;/a&gt; (“Fast 3kB alternative to React with the same ES6 API.”). After selecting some ec2 configurations, it was clear to me that this costs more than the ec2 based solution (even ignoring spot instance pricing) BUT it is easier and has fewer things to worry about.&lt;/p&gt;

&lt;p&gt;site: &lt;a href=&quot;https://nexus-uw.github.io/crappy-preact-fargate-calculator/&quot;&gt;https://nexus-uw.github.io/crappy-preact-fargate-calculator/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;source: &lt;a href=&quot;https://github.com/nexus-uw/crappy-preact-fargate-calculator&quot;&gt;https://github.com/nexus-uw/crappy-preact-fargate-calculator&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 23 Dec 2017 00:00:00 -0600</pubDate>
        <link>http://0.0.0.0:4000/2017/12/23/crummy-fargate-calc.html</link>
        <guid isPermaLink="true">http://0.0.0.0:4000/2017/12/23/crummy-fargate-calc.html</guid>
        
        <category>preact</category>
        
        <category>fargate</category>
        
        <category>aws</category>
        
        
      </item>
    
      <item>
        <title>Unit Testing CloudFormation Templates</title>
        <description>&lt;p&gt;Below is a quick mocha/jasmine test suite for validating all CloudFormation templates in a directory&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'fs'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'aws-sdk'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CloudFormation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;region&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'us-east-1'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PATH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./Path/to/folder/containing/templates'&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'CloudFormation Templates'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;readdirSync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filename&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;validate&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;validateTemplate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;TemplateBody&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;readFileSync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PATH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This can be helpful in quickly failing a CI/CD pipeline before trying to deploy an invalid* template.&lt;/p&gt;
</description>
        <pubDate>Fri, 22 Dec 2017 00:00:00 -0600</pubDate>
        <link>http://0.0.0.0:4000/2017/12/22/unit-testing-cloudformation.html</link>
        <guid isPermaLink="true">http://0.0.0.0:4000/2017/12/22/unit-testing-cloudformation.html</guid>
        
        <category>CloudFormation</category>
        
        <category>unit testing</category>
        
        <category>nodejs</category>
        
        
      </item>
    
      <item>
        <title>Easy ECS Login</title>
        <description>&lt;p&gt;just run&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$(aws ecr get-login --no-include-email)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;which will have the aws cli generate the docker login command and then zsh will run that command&lt;/p&gt;
</description>
        <pubDate>Wed, 08 Nov 2017 00:00:00 -0600</pubDate>
        <link>http://0.0.0.0:4000/2017/11/08/easy-ecs-login.html</link>
        <guid isPermaLink="true">http://0.0.0.0:4000/2017/11/08/easy-ecs-login.html</guid>
        
        <category>docker</category>
        
        <category>zsh</category>
        
        <category>ecs</category>
        
        
      </item>
    
      <item>
        <title>I Have Mastered Elm By Making Yet Another Calculator (For AWS ElasticCache), And So Can You</title>
        <description>&lt;p&gt;&lt;img src=&quot;/assets/elastic-cache-elm.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As a &lt;em&gt;fun&lt;/em&gt; task, I relearned first year pure functional programming using &lt;a href=&quot;http://elm-lang.org/&quot;&gt;Elm&lt;/a&gt;.  To generate something more useful and exciting than YATA (&lt;strong&gt;Y&lt;/strong&gt;et &lt;strong&gt;A&lt;/strong&gt;nother &lt;strong&gt;T&lt;/strong&gt;odo &lt;strong&gt;A&lt;/strong&gt;pp), I decided to come up with a simple calculator for figuring out much it will cost per day to operate a Redis Cluster on AWS Elastic Cache for a given size + network speed.&lt;/p&gt;

&lt;p&gt;Take Aways&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Its amazing how much one can forget from 1st year CS&lt;/li&gt;
  &lt;li&gt;Even coming from writing functional-ish all day at work, pure functional programing is hard (really wished for an optional index param when iterating through a list)&lt;/li&gt;
  &lt;li&gt;Elm’s documentation code really be fleshed out to cover more than how to get things started and how the language compares to JS&lt;/li&gt;
  &lt;li&gt;Elm’s compilation errors were really clear and useful (especially in VS Code)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Feel free to check it out at:
&lt;a href=&quot;https://nexus-uw.github.io/elastic-cache-calculator/&quot;&gt;https://nexus-uw.github.io/elastic-cache-calculator/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Source code is available at:
&lt;a href=&quot;https://github.com/nexus-uw/elastic-cache-calculator&quot;&gt;https://github.com/nexus-uw/elastic-cache-calculator&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 01 Jun 2017 00:00:00 -0500</pubDate>
        <link>http://0.0.0.0:4000/2017/06/01/im-an-elm-master.html</link>
        <guid isPermaLink="true">http://0.0.0.0:4000/2017/06/01/im-an-elm-master.html</guid>
        
        <category>elm</category>
        
        <category>elastic cache</category>
        
        <category>calculator</category>
        
        <category>Jake Paul</category>
        
        
      </item>
    
      <item>
        <title>just released ammobin.ca</title>
        <description>&lt;p&gt;For the past month, I have been putting together &lt;a href=&quot;https://ammobin.ca/?src=ramsay.xyz&quot;&gt;ammobin.ca&lt;/a&gt; using &lt;a href=&quot;https://nuxtjs.org/&quot;&gt;nuxt.js&lt;/a&gt; (server-side vue.js) + &lt;a href=&quot;https://github.com/NaturalNode/natural&quot;&gt;natural&lt;/a&gt; (natural language classification).&lt;/p&gt;

&lt;p&gt;Feel free to check it out.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ammobin.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Thu, 01 Jun 2017 00:00:00 -0500</pubDate>
        <link>http://0.0.0.0:4000/2017/06/01/ammobinca.html</link>
        <guid isPermaLink="true">http://0.0.0.0:4000/2017/06/01/ammobinca.html</guid>
        
        <category>canada</category>
        
        <category>ammobin.ca</category>
        
        <category>nuxt.js</category>
        
        <category>vue.js</category>
        
        
      </item>
    
      <item>
        <title>ramsay.xyz Now Available as an Eepsite (I2P)</title>
        <description>&lt;p&gt;Here is a link to it: &lt;a href=&quot;http://ramsay.i2p&quot;&gt;ramsay.i2p&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Tue, 28 Mar 2017 00:00:00 -0500</pubDate>
        <link>http://0.0.0.0:4000/2017/03/28/site-also-available-as-an-eep-site.html</link>
        <guid isPermaLink="true">http://0.0.0.0:4000/2017/03/28/site-also-available-as-an-eep-site.html</guid>
        
        <category>i2p</category>
        
        <category>eepsite</category>
        
        <category>darknet</category>
        
        
      </item>
    
      <item>
        <title>Notes About Unearthed Toronto 2017</title>
        <description>&lt;p&gt;&lt;img src=&quot;/assets/unearthed-logo-300.png&quot; alt=&quot;&quot; /&gt; &lt;img src=&quot;/assets/snapfix-logo.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Two weeks ago I participated in the &lt;a href=&quot;https://unearthed.solutions/hackathons/unearthed-toronto-2017/&quot;&gt;Unearthed Toronto hackathon&lt;/a&gt;. It was sponsored by Barick Gold who also provided the problems and data sets.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/letaylor622&quot;&gt;letaylor622&lt;/a&gt;, &lt;a href=&quot;https://github.com/Cameron2920&quot;&gt;Cameron2920&lt;/a&gt;, and I where able to put together a working prototype of an pre-emptive inventory system for a haul truck mechanic shop. We were able to take a service history of truck, and calculate the average up time between service visits each ‘component’ of the truck would require (&lt;a href=&quot;https://github.com/nexus-uw/report-history-analysis&quot;&gt;nexus-uw/report-history-analysis&lt;/a&gt;). Taking these results, the system was able to tell the mechanics/inventory mangers how much parts inventory they required to service the trucks when they were expected to require work. The expected inventory demand was then displayed alongside the actual inventory levels so that they could see how well they would be able to meet demand. Our solution had a responsive &lt;a href=&quot;https://github.com/nexus-uw/uneathed-webapp&quot;&gt;web app&lt;/a&gt; built with vue.js, &lt;a href=&quot;https://github.com/Cameron2920/unearthed-pepperoni&quot;&gt;rails backend&lt;/a&gt;, and a Postgres DB (everything is deployed using docker and live at &lt;a href=&quot;https://snapfix.io&quot;&gt;https://snapfix.io&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;In the end, we did not win.&lt;/p&gt;

&lt;h3 id=&quot;lessons-learned&quot;&gt;Lessons Learned&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;You dont have to actually build something, vaporware is acceptable if the idea is bold and exciting. (Some of the teams comprised of data scientists had much bolder solutions to the problems presented).&lt;/li&gt;
  &lt;li&gt;A concise and focused pitch is key.&lt;/li&gt;
  &lt;li&gt;Nobody cares about the tools you used, only how it looks on the projector.&lt;/li&gt;
  &lt;li&gt;If you already have a team, avoid accepting randos. Best to keep things simple.&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Thu, 16 Mar 2017 00:00:00 -0500</pubDate>
        <link>http://0.0.0.0:4000/2017/03/16/notes-about-unearthed-toronto-2017.html</link>
        <guid isPermaLink="true">http://0.0.0.0:4000/2017/03/16/notes-about-unearthed-toronto-2017.html</guid>
        
        <category>hackathon</category>
        
        <category>barrick</category>
        
        <category>unearthed</category>
        
        <category>toronto</category>
        
        <category>hackathon</category>
        
        <category>snapfix.io</category>
        
        <category>vue.js</category>
        
        <category>rails</category>
        
        <category>docker</category>
        
        
      </item>
    
      <item>
        <title>A List of Some Tor Hidden Service Mirrors of Clearnet Sites</title>
        <description>&lt;ul&gt;
  &lt;li&gt;facebook.com &lt;a href=&quot;https://facebookcorewwwi.onion/&quot;&gt;https://facebookcorewwwi.onion/&lt;/a&gt; (&lt;a href=&quot;https://www.facebook.com/notes/protect-the-graph/making-connections-to-facebook-more-secure/1526085754298237&quot;&gt;src&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;duckduckgo.com &lt;a href=&quot;https://3g2upl4pq6kufc4m.onion/&quot;&gt;https://3g2upl4pq6kufc4m.onion/&lt;/a&gt; (&lt;a href=&quot;https://en.wikipedia.org/wiki/DuckDuckGo&quot;&gt;src&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;protonmail.com &lt;a href=&quot;https://protonirockerxow.onion&quot;&gt;https://protonirockerxow.onion&lt;/a&gt; (&lt;a href=&quot;https://protonmail.com/blog/tor-encrypted-email/&quot;&gt;src&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;thepiratebay.org &lt;a href=&quot;http://uj3wazyk5u4hnvtk.onion/&quot;&gt;http://uj3wazyk5u4hnvtk.onion/&lt;/a&gt; (&lt;a href=&quot;https://thepiratebay.org&quot;&gt;src&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;keybase.io &lt;a href=&quot;http://fncuwbiisyh6ak3i.onion&quot;&gt;http://fncuwbiisyh6ak3i.onion&lt;/a&gt; (&lt;a href=&quot;https://keybase.io&quot;&gt;src&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;onions.debian.org &lt;a href=&quot;http://5nca3wxl33tzlzj5.onion/&quot;&gt;http://5nca3wxl33tzlzj5.onion/&lt;/a&gt;(&lt;a href=&quot;https://onion.debian.org/&quot;&gt;src&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;ramsay.xyz &lt;a href=&quot;http://eqac56hh4ppxzy27.onion/&quot;&gt;http://eqac56hh4ppxzy27.onion/&lt;/a&gt; (&lt;a href=&quot;https://github.com/nexus-uw/nexus-uw.github.io/blob/master/_includes/footer.html#L5&quot;&gt;src&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;nytimes.com &lt;a href=&quot;https://www.nytimes3xbfgragh.onion/&quot;&gt;https://www.nytimes3xbfgragh.onion/&lt;/a&gt;(&lt;a href=&quot;https://open.nytimes.com/https-open-nytimes-com-the-new-york-times-as-a-tor-onion-service-e0d0b67b7482&quot;&gt;src&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;view history of this page at &lt;a href=&quot;https://github.com/nexus-uw/nexus-uw.github.io/blob/master/_posts/2017-01-22-list-of-tor-sites.md&quot;&gt;https://github.com/nexus-uw/nexus-uw.github.io/blob/master/_posts/2017-01-22-list-of-tor-sites.md&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 22 Jan 2017 00:00:00 -0600</pubDate>
        <link>http://0.0.0.0:4000/2017/01/22/list-of-tor-sites.html</link>
        <guid isPermaLink="true">http://0.0.0.0:4000/2017/01/22/list-of-tor-sites.html</guid>
        
        <category>tor</category>
        
        <category>hidden</category>
        
        <category>service</category>
        
        <category>onion</category>
        
        
      </item>
    
      <item>
        <title>How to Use Redux Logger with Revue</title>
        <description>&lt;p&gt;When using revue to connect an app’s redux state to the internals of vuejs change detection, the state is transformed from plain objects, to Vue’s observe objects. This is great, since it gets everything working transparently, but leaves a lot to be desired when logging changes to the redux state (using redux-logger).&lt;/p&gt;

&lt;p&gt;This leaves our chrome console looking like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/before.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;By creating custom action + state transformers for redux-logger, the observe objects can be converted back into plain objects. These plain objects reflect what the developer expects to be in the state and are much easier to read in the console.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;elements&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'../reducers'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'vue'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Revue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'revue'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;createStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;applyMiddleware&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;combineReducers&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'redux'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createLogger&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'redux-logger'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// unwrap the observe that vue wraps our state+actions with so that we can inspect our state in using the redux logger&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;unwrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// handle undefined/null&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;unwrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'object'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;unwrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createLogger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;actionTransformer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;unwrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;stateTransformer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;unwrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reduxStore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;combineReducers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;elements&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;applyMiddleware&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;store&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Revue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reduxStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;By using the above typescript snippet, the console logging appears like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/after.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 07 Jan 2017 00:00:00 -0600</pubDate>
        <link>http://0.0.0.0:4000/2017/01/07/how-to-use-redux-logger-with-revue.html</link>
        <guid isPermaLink="true">http://0.0.0.0:4000/2017/01/07/how-to-use-redux-logger-with-revue.html</guid>
        
        <category>vue.js</category>
        
        <category>redux</category>
        
        <category>revue</category>
        
        <category>logging</category>
        
        
      </item>
    
      <item>
        <title>Sample Compound Interest Calculator (part 1)</title>
        <description>&lt;p&gt;&lt;img src=&quot;/assets/vue.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So I built a simple compound interest rate calculator using &lt;a href=&quot;https://vuejs.org&quot;&gt;vue.js&lt;/a&gt; this afternoon. Gotta say it is pretty nice after working with Angular 2 for the past 8 months.
Vue.js brings me back to the good old days of Angular 1 with the ability to build an app in 60 LOC (all in index.html) without having to use webpack or some CLI.&lt;/p&gt;

&lt;p&gt;Stay tuned for part 2, where I will reflect on polishing the app up to be more professional with components and unit tests.&lt;/p&gt;

&lt;p&gt;Site is available at: &lt;a href=&quot;https://ramsay.xyz/vue-compound-interest-calculator/&quot;&gt;https://ramsay.xyz/vue-compound-interest-calculator/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Code is available at: &lt;a href=&quot;https://github.com/nexus-uw/vue-compound-interest-calculator&quot;&gt;https://github.com/nexus-uw/vue-compound-interest-calculator&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Fri, 16 Dec 2016 00:00:00 -0600</pubDate>
        <link>http://0.0.0.0:4000/2016/12/16/vue-compond-interest-calculator-part-1.html</link>
        <guid isPermaLink="true">http://0.0.0.0:4000/2016/12/16/vue-compond-interest-calculator-part-1.html</guid>
        
        <category>vue.js</category>
        
        <category>compound</category>
        
        <category>interest</category>
        
        <category>calculator</category>
        
        
      </item>
    
  </channel>
</rss>
