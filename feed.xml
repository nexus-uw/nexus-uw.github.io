<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Simon Ramsay</title>
    <description>A personal tech blog focused on AWS and Docker</description>
    <link>https://ramsay.xyz/</link>
    <atom:link href="https://ramsay.xyz/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 23 Jun 2024 23:06:40 -0500</pubDate>
    <lastBuildDate>Sun, 23 Jun 2024 23:06:40 -0500</lastBuildDate>
    <generator>Jekyll v4.2.2</generator>
    
      <item>
        <title>Which Major NA Sports League Has The Most Solo Team Locations?</title>
        <description>&lt;h1 id=&quot;question&quot;&gt;Question&lt;/h1&gt;

&lt;p&gt;Today I sought to answer the question, “Which sports league has the most solo team locations (Only professional team in town)?”. Instead of trying to Duck this, I chose to use Google Sheets to answer this for me.
In order to avoid inconsistent location naming between teams in the same location (ie: New England Patriots and Boston Red Socks both play in Boston), the team locations were ‘normalized’ enough to be useful.&lt;/p&gt;

&lt;p&gt;My data sheet used to generate the answer -&amp;gt; &lt;a href=&quot;/assets/NA_professional_major_league_team_location_stats.ods&quot;&gt;ODS&lt;/a&gt; &lt;a href=&quot;/assets/NA_professional_major_league_team_location_stats.pdf&quot;&gt;PDF&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;answers-as-of-time-of-writing&quot;&gt;Answer(s) (as of time of writing)&lt;/h1&gt;
&lt;p&gt;The NHL has the most solo team cities with 10 (Calgary, Columbus, Edmonton, Montreal, Newark, Ottawa, Raleigh, San Jose, Vancouver, Winnipeg). It should be noted that 6 of them are in Canada.&lt;/p&gt;

&lt;h3 id=&quot;if-we-exclude-canadian-cities-for-being-located-in-a-silly-place&quot;&gt;If we exclude Canadian cities (for being located in a silly place)&lt;/h3&gt;
&lt;p&gt;The NBA has the most solo team American cities with 7 (Memphis, Oklahoma City, Orlando, Portland, Sacramento, Salt Lake City, San Antonio)&lt;/p&gt;

&lt;h1 id=&quot;future-work-&quot;&gt;future work (?)&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;what if the MLS is included?&lt;/li&gt;
  &lt;li&gt;NCAA ? (how would that be normalized?)&lt;/li&gt;
  &lt;li&gt;market size w.r.t. number of teams present&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 06 Apr 2024 00:00:00 -0500</pubDate>
        <link>https://ramsay.xyz/2024/04/06/na-sport-team-location-stats.html</link>
        <guid isPermaLink="true">https://ramsay.xyz/2024/04/06/na-sport-team-location-stats.html</guid>
        
        <category>sports ball</category>
        
        
      </item>
    
      <item>
        <title>mokintoken is now go</title>
        <description>&lt;p&gt;Over Christmas, I converted mokintoken from &lt;a href=&quot;https://github.com/nexus-uw/mokintoken/pull/21&quot;&gt;PHP to Go&lt;/a&gt;. This migration did not require any front end work (nice).&lt;/p&gt;

&lt;h1 id=&quot;why&quot;&gt;why&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;I knew little of PHP and the docker container was 700MB+ and filled with dependencies I knew little of&lt;/li&gt;
  &lt;li&gt;Go is kinda hot today&lt;/li&gt;
  &lt;li&gt;While I dont know much about Go, I was able to code the server in a single file with only 2 basic dependencies (uuid + sqlite)&lt;/li&gt;
  &lt;li&gt;Docker container is down to 14mb&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Mon, 19 Feb 2024 00:00:00 -0600</pubDate>
        <link>https://ramsay.xyz/2024/02/19/mokintoken-is-now-go.html</link>
        <guid isPermaLink="true">https://ramsay.xyz/2024/02/19/mokintoken-is-now-go.html</guid>
        
        <category>go</category>
        
        <category>mokintoken</category>
        
        
      </item>
    
      <item>
        <title>Wrapping Up ammobin.ca</title>
        <description>&lt;p&gt;At the beginning of October 2023, I chose to shutdown ammobin.ca after 6 years.&lt;/p&gt;

&lt;h2 id=&quot;why&quot;&gt;Why&lt;/h2&gt;
&lt;p&gt;It costs me about $9USD a month and a bunch of maintenance time. The number of broken scrapes have been pilling up and I lack the interest in fixing them.&lt;/p&gt;

&lt;p&gt;Additionally, the Nuxt 2-&amp;gt;3 migration has gotten stuck in the mud (with the code remaining on the bridge migration package). A bunch of plugins/middleware  is stuck on v2 without a clear migration plan (note: npm packages moving to scoped packages is a great way to make it very hard to know about version bumps). An attempt was made to re-write the front end in v3, but I lack the time or interest these days to take on that chunk of work&lt;/p&gt;

&lt;h2 id=&quot;how&quot;&gt;How&lt;/h2&gt;
&lt;p&gt;frontend was switched out with a basic nuxt v3 app that redirects users to arsenalforce.ca (&lt;a href=&quot;https://github.com/ammobinDOTca/ammobin-client/commit/d37c12b3fd50dc3f4c38790f2b185ae2163b5444&quot;&gt;src&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&quot;what-is-happening-with-the-old-code--data&quot;&gt;What is happening with the old code + data&lt;/h2&gt;

&lt;p&gt;The client code is still around &lt;a href=&quot;https://github.com/ammobinDOTca/ammobin-client/releases/tag/LAST_LIVE_VERSION_OF_SITE&quot;&gt;here&lt;/a&gt;. The backend code is still up on github, and the domain is valid for a few more years.&lt;/p&gt;

&lt;p&gt;Any user data has been deleted from my datastore. Cloudflare + AWS may have their own user request logs that I cant access.&lt;/p&gt;

&lt;h2 id=&quot;history&quot;&gt;History&lt;/h2&gt;
&lt;p&gt;Ammobin started with &lt;a href=&quot;https://github.com/ammobinDOTca/ammobin-compose&quot;&gt;single host + docker containers&lt;/a&gt; and ended up with a &lt;a href=&quot;https://github.com/ammobinDOTca/ammobin-cdk&quot;&gt;AWS CDK Serverless setup&lt;/a&gt; + Cloudflare Workers handling SSR for the frontend code.&lt;/p&gt;

&lt;h2 id=&quot;learnings&quot;&gt;Learnings&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Nobody cares about tech. Open source code, never received any take up.&lt;/li&gt;
  &lt;li&gt;AWS is a random costs. Costs fluctuate based on customer and dev usage.&lt;/li&gt;
  &lt;li&gt;AWS also lets you have a beta setup easily with serverless tech (since it can easily exist within the free tier)&lt;/li&gt;
  &lt;li&gt;AWS is better than docker on DigitalOcean droplet. Easier to deploy. Don’t have to ssh in every so often to clean up machine and restart stuff&lt;/li&gt;
  &lt;li&gt;learned about seo (ammobin.ca was the top 1-2 results for ammo related searches for Canada)&lt;/li&gt;
  &lt;li&gt;learned about challenges of selfhosted email (microsoft just refused to accept emails from my domain&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;december-update&quot;&gt;December update&lt;/h1&gt;

&lt;p&gt;ammobin.ca has been successfully transitioned to new ownership and I am no longer involved with it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/Screenshot_20231213-134408.png&quot; alt=&quot;rm-nexusuw&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Sat, 28 Oct 2023 00:00:00 -0500</pubDate>
        <link>https://ramsay.xyz/2023/10/28/wrapping-up-ammobin.ca.html</link>
        <guid isPermaLink="true">https://ramsay.xyz/2023/10/28/wrapping-up-ammobin.ca.html</guid>
        
        <category>ammobin.ca</category>
        
        
      </item>
    
      <item>
        <title>latency impact of distance between client to lambda VS lambda to dynamodb table</title>
        <description>&lt;h1 id=&quot;question&quot;&gt;Question&lt;/h1&gt;
&lt;p&gt;If a service’s DynamoDb (DDB) is in a region from some users, is it better to call DDB from a lambda close to the end user OR close to the DDB?&lt;/p&gt;

&lt;p&gt;(ie: if DDB is in us-east-1, but some users are in us-west-2, does it make sense to deploy a lambda in us-west-2 OR should they just call back to us-east-1)&lt;/p&gt;

&lt;h3 id=&quot;note&quot;&gt;Note&lt;/h3&gt;
&lt;p&gt;This assumes that DDB Global Tables are not viable (ie: already have a global table in us-west-2, it probably would not make sense to replicate it into us-west-1).&lt;/p&gt;

&lt;h2 id=&quot;test&quot;&gt;Test&lt;/h2&gt;
&lt;h3 id=&quot;3-setups-for-a-ddb-in-us-east-1&quot;&gt;3 setups, for a ddb in us-east-1&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Lambda in us-west-2&lt;/li&gt;
  &lt;li&gt;Lambda in us-east-1&lt;/li&gt;
  &lt;li&gt;Cloudfront in front of us-east-1 Lambda (for edge routing)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Additionally a base line was generated by running the same test against a us-west-2 Lambda talking to a us-west-2 DDB.&lt;/p&gt;

&lt;p&gt;The Lambda was a single js file running on nodejs-16.x  with 125MB of memory and no provisioned capacity. The Lambda would perform a single GetItem request for the ‘350KB’ row in the table and return the result. This item was just an ID and a 350KB string attribute so as to generate some network transfer latency.&lt;/p&gt;

&lt;h3 id=&quot;process&quot;&gt;Process&lt;/h3&gt;
&lt;p&gt;From an ec2 in us-west-2, a 5 min load test with 30 concurrent users was run using &lt;a href=&quot;https://www.npmjs.com/package/artillery&quot;&gt;artillery&lt;/a&gt; against each Lambda url / Cloudfront distribution.&lt;/p&gt;

&lt;h2 id=&quot;results&quot;&gt;Results&lt;/h2&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;BASELINE
http.codes.200: ................................................................ 859
http.request_rate: ............................................................. 3/sec
http.requests: ................................................................. 859
http.response_time:
  min: ......................................................................... 108
  max: ......................................................................... 1836
  median: ...................................................................... 202.4
  p95: ......................................................................... 528.6
  p99: ......................................................................... 620.3

CROSS REGION DDB
http.codes.200: ................................................................ 914
http.request_rate: ............................................................. 3/sec
http.requests: ................................................................. 914
http.response_time:
  min: ......................................................................... 526
  max: ......................................................................... 3446
  median: ...................................................................... 1652.8
  p95: ......................................................................... 1978.7
  p99: ......................................................................... 2186.8

CROSS REGION LAMBDA
http.codes.200: ................................................................ 914
http.request_rate: ............................................................. 3/sec
http.requests: ................................................................. 914
http.response_time:
  min: ......................................................................... 167
  max: ......................................................................... 1936
  median: ...................................................................... 262.5
  p95: ......................................................................... 596
  p99: ......................................................................... 645.6

CLOUDFRONT IN FRONT OF CROSS REGION LAMBDA
http.codes.200: ................................................................ 882
http.request_rate: ............................................................. 3/sec
http.requests: ................................................................. 882
http.response_time:
  min: ......................................................................... 202
  max: ......................................................................... 1859
  median: ...................................................................... 399.5
  p95: ......................................................................... 788.5
  p99: ......................................................................... 925.4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/BASED-EDGE/cross-region-latency/blob/master/results-ec2.txt&quot;&gt;src&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/from_ec2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;did-running-the-same-test-from-my-home-computer-to-see-if-starting-outside-of-the-aws-network-would-have-any-affect&quot;&gt;Did running the same test from my home computer to see if starting outside of the AWS network would have any affect?&lt;/h3&gt;
&lt;p&gt;it did not
&lt;img src=&quot;/assets/from_home.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Best to just call out to far away region directly (it had the closest latencies to the base line for all the stats)&lt;/p&gt;

&lt;h3 id=&quot;notes&quot;&gt;Notes&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;repo with infra + lambda + test config is available at https://github.com/BASED-EDGE/cross-region-latency&lt;/li&gt;
  &lt;li&gt;this only covers a limited use case, best to investigate for yourself&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;further-questions&quot;&gt;Further questions&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;What about different services from just than just DDB (ie: RDS, S3, SNS)?&lt;/li&gt;
  &lt;li&gt;Does the same thing apply to DDB write requests? &lt;a href=&quot;https://github.com/BASED-EDGE/cross-region-latency/blob/master/results_POST_1KB.txt&quot;&gt;YES&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;What effect does using different regions have on the above results (ie: ca-central-1 to ap-southeast-2)&lt;/li&gt;
  &lt;li&gt;Why does remote DDB perform so much worse than remote lambda? the lambda is not transforming the data (apart from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JSON.stringify()&lt;/code&gt;) so the network latency would be assumed to be very similar.&lt;/li&gt;
  &lt;li&gt;How would a cross region AWS PrivateLink endpoint change the results?&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 18 Nov 2022 00:00:00 -0600</pubDate>
        <link>https://ramsay.xyz/2022/11/18/cross-aws-region-latency.html</link>
        <guid isPermaLink="true">https://ramsay.xyz/2022/11/18/cross-aws-region-latency.html</guid>
        
        <category>aws</category>
        
        
      </item>
    
      <item>
        <title>released some basic Caddy Docker containers</title>
        <description>&lt;h1 id=&quot;created-caddy-do-and-caddy-gandi&quot;&gt;created caddy-do and caddy-gandi&lt;/h1&gt;

&lt;p&gt;both of these containers are plain caddy containers with the DigitalOcean and Gandi DNS plugins already installed.&lt;/p&gt;

&lt;h1 id=&quot;why&quot;&gt;why?&lt;/h1&gt;
&lt;h3 id=&quot;enabled-auto-build-using-github-actions&quot;&gt;enabled auto build using github actions&lt;/h3&gt;
&lt;p&gt;keeps the base image up to date (since these ones dont need be changed)&lt;/p&gt;

&lt;h3 id=&quot;allows-for-ssl-at-home-behind-ones-nat&quot;&gt;allows for SSL at home (behind ones NAT)&lt;/h3&gt;
&lt;p&gt;I have found it handy to assign real public DNS names to my internal devices (ie: example.at.home.ramsay.xyz -&amp;gt; 10.0.0.2).&lt;/p&gt;

&lt;p&gt;Enabling HSTS on ramsay.xyz (with subdomains) has then caused my browser to refuse to connect to http only servers at home.&lt;/p&gt;

&lt;p&gt;Since Caddy usually issues certs by hosting a validation file on your server, it needs to be publicly accessible. But with DNS validation, the server can be isolated on a private network (like ones NAT at home)&lt;/p&gt;

&lt;h1 id=&quot;buy-why-ssl-home&quot;&gt;Buy why ssl home?&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;protect against local network snooping (ie: random cheap iot device, not so friendly guest)&lt;/li&gt;
  &lt;li&gt;can enforce HTTPS only CSP for self hosted site&lt;/li&gt;
  &lt;li&gt;allows one to enroll their personal domain in &lt;a href=&quot;https://hstspreload.org/&quot;&gt;HSTS preload list&lt;/a&gt; (since it requires HSTS header to includeSudDomains)&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;links&quot;&gt;links&lt;/h1&gt;
&lt;h2 id=&quot;github&quot;&gt;github&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/nexus-uw/caddy-do&quot;&gt;caddy-do&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/nexus-uw/caddy-gandi&quot;&gt;caddy-gandi&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;containers&quot;&gt;containers&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ghcr.io/nexus-uw/caddy-do&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ghcr.io/nexus-uw/caddy-gandi&lt;/code&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 30 Oct 2022 00:00:00 -0500</pubDate>
        <link>https://ramsay.xyz/2022/10/30/released-some-basic-docker-containers.html</link>
        <guid isPermaLink="true">https://ramsay.xyz/2022/10/30/released-some-basic-docker-containers.html</guid>
        
        <category>caddy</category>
        
        <category>docker</category>
        
        
      </item>
    
      <item>
        <title>0.1.0 edge-lambda-url-authorizer is now ready for use</title>
        <description>&lt;p&gt;Today I am happy to announce the release of &lt;a href=&quot;https://www.npmjs.com/package/edge-lambda-url-authorizer&quot;&gt;edge-lambda-url-authorizer 0.1.0&lt;/a&gt; (ready for actual use)&lt;/p&gt;

&lt;h1 id=&quot;what&quot;&gt;What&lt;/h1&gt;
&lt;p&gt;edge-lambda-url-authorizer is a NodeJS package (with Typescript types) to be deployed a Lambda@Edge handler for Cloudfront origin requests. This package will &lt;a href=&quot;https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html&quot;&gt;sigv4 sign&lt;/a&gt; the incoming request with the lambda’s instance credentials using &lt;a href=&quot;https://www.npmjs.com/package/aws4&quot;&gt;aws4&lt;/a&gt; before forwarding the request to the origin. The origin is expected to be a &lt;a href=&quot;https://aws.amazon.com/blogs/aws/announcing-aws-lambda-function-urls-built-in-https-endpoints-for-single-function-microservices/&quot;&gt;Lambda Function URL&lt;/a&gt; endpoint with IAM_AUTH enabled.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/edge_signer.drawio.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;why-lambda-url---removed-extra-unnecessary-dependency-on-apigateway&quot;&gt;Why lambda url -&amp;gt; removed extra (unnecessary) dependency on ApiGateway.&lt;/h1&gt;
&lt;h3 id=&quot;unnecessary&quot;&gt;unnecessary&lt;/h3&gt;
&lt;p&gt;api gateway has a whole list of features and benefits for using, but for a basic ‘please expose my lambda as a public endpoint’ it is unnecessary&lt;/p&gt;

&lt;p&gt;apigateway is a separate service from lambda (so your chance of something killing your service is higher) us-west-2 had a large apigateway outage earlier this month&lt;/p&gt;

&lt;h3 id=&quot;save-a-few-pennies&quot;&gt;save a few pennies&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;Function URL Pricing
Function URLs are included in Lambda’s request and duration pricing. For example, let’s imagine that you deploy a single Lambda function with 128 MB of memory and an average invocation time of 50 ms. The function receives five million requests every month, so the cost will be $1.00 for the requests, and $0.53 for the duration. The grand total is $1.53 per month, in the US East (N. Virginia) Region.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;function url does not cost extra&lt;/p&gt;

&lt;p&gt;api gateway costs $ per million requests (after the free tier) https://aws.amazon.com/api-gateway/pricing/
-&amp;gt; this tends to be a larger expense than the underlying lambda&lt;/p&gt;

&lt;p&gt;(for ammobin.ca, this line item represented almost 10% of the monthly AWS spend)&lt;/p&gt;

&lt;h1 id=&quot;challenges-with-plain-function-url&quot;&gt;challenges with plain function url&lt;/h1&gt;
&lt;h2 id=&quot;cors&quot;&gt;CORS&lt;/h2&gt;
&lt;p&gt;browsers will make CORS requests (which are supported) b/c the function url is on a different domain from one’s website. This creates an extra round trip for each actual request. (question: do OPTIONS requests add to your aws bill?)&lt;/p&gt;

&lt;h2 id=&quot;csp&quot;&gt;CSP&lt;/h2&gt;
&lt;p&gt;need to add lambda url to an Content-Security-Policy&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;different for each stage/region -&amp;gt; more work to generate/maintain&lt;/li&gt;
  &lt;li&gt;one more thing to worry about&lt;/li&gt;
  &lt;li&gt;multiple function urls require multiple domains to add to the policy&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;randomauto-generated-domain&quot;&gt;random/auto generated domain&lt;/h2&gt;
&lt;p&gt;migrating function urls now requires server updates (instead of pointing to custom domain)&lt;/p&gt;

&lt;p&gt;ppl might ask why requests are going off to some random auto generated domain?&lt;/p&gt;

&lt;p&gt;if the lambda function were to be deleted + recreated (intentionally or not), unable to get old url back -&amp;gt; risk someone might snag it or have to update a bunch of references to it
(could be very hard if hard coded in client sdks or the like)&lt;/p&gt;

&lt;h2 id=&quot;lacks-security-features-auto-scan-tools-can-complain&quot;&gt;lacks security features (auto scan tools can complain)&lt;/h2&gt;
&lt;p&gt;aws to their credit, launched with excellent iam policy support for (make sure that account is ‘secure’)
see https://docs.aws.amazon.com/lambda/latest/dg/urls-auth.html#urls-governance&lt;/p&gt;

&lt;p&gt;auto scan tools can flag ‘endpoint without authentication enabled’, enable IAM_AUTH keeps the bots off your back&lt;/p&gt;

&lt;h2 id=&quot;bot-protection&quot;&gt;bot protection&lt;/h2&gt;
&lt;p&gt;cant apply aws waf (but can use lambda throttling)&lt;/p&gt;

&lt;h2 id=&quot;caching&quot;&gt;caching&lt;/h2&gt;
&lt;p&gt;req could/should be cached. could be cached by browser, but not by cdn&lt;/p&gt;

&lt;p&gt;if one site receives enough traffic, all of these extraneous lambda invocations can start to add up&lt;/p&gt;

&lt;h1 id=&quot;solution-enable-iam_auth--cloudfront&quot;&gt;solution enable IAM_AUTH + cloudfront&lt;/h1&gt;
&lt;p&gt;have lambda@edge sign incoming origin request&lt;/p&gt;

&lt;h2 id=&quot;cloudfront-features&quot;&gt;cloudfront features&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;custom domain&lt;/li&gt;
  &lt;li&gt;caching policy&lt;/li&gt;
  &lt;li&gt;AWS Shield + WAF protection&lt;/li&gt;
  &lt;li&gt;edge routing (could also do something like https://ramsay.xyz/2022/01/05/release-of-blue-green-static-aws-edge.html to internal route to the closest aws region for backing lambda execution)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;iam-auth&quot;&gt;iam auth&lt;/h2&gt;
&lt;p&gt;apply an iam resource policy (handy for cross account access)&lt;/p&gt;

&lt;p&gt;prevents people from calling your api directly (to by pass your cloudfront config)&lt;/p&gt;

&lt;p&gt;no more ‘api without authentication’ security scan issues&lt;/p&gt;

&lt;h3 id=&quot;alt&quot;&gt;alt&lt;/h3&gt;
&lt;p&gt;custom header auth -&amp;gt; brittle, not great, does not let people get creative (but current suggested solution on https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/DownloadDistS3AndCustomOrigins.html#concept_lambda_function_url)&lt;/p&gt;

&lt;p&gt;sigv4 lambda is ~2ms execution time for p90 so it doesn’t cost too much (and execute on origin req, so cache reqs need no exe)&lt;/p&gt;

&lt;h3 id=&quot;issue&quot;&gt;issue&lt;/h3&gt;
&lt;p&gt;origins per distribution defaults to 25 (can be increased to ???)
https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/cloudfront-limits.html#limits-web-distributions&lt;/p&gt;

&lt;h3 id=&quot;next-steps&quot;&gt;next steps&lt;/h3&gt;
&lt;p&gt;could be generalized further into a generic sigv4 proxy for aws resources (ie: call dynamoDb or s3 directly). but that is much more complicated (and risky). it would require a very good understanding of IAM policies to properly secure one’s resources.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/3.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Sun, 30 Oct 2022 00:00:00 -0500</pubDate>
        <link>https://ramsay.xyz/2022/10/30/lambda-edge-auth.html</link>
        <guid isPermaLink="true">https://ramsay.xyz/2022/10/30/lambda-edge-auth.html</guid>
        
        <category>lambda@edge</category>
        
        <category>typescript</category>
        
        <category>aws</category>
        
        
      </item>
    
      <item>
        <title>ramsay.xyz now on ipfs</title>
        <description>&lt;p&gt;ramsay.xyz is now available on &lt;a href=&quot;https://ipfs.io&quot;&gt;InterPlanetary File System (IPFS)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It can be easily accessed through its IPNS over at Cloudflare’s gateway &lt;a href=&quot;https://cloudflare-ipfs.com/ipns/fleek.ramsay.xyz&quot;&gt;cloudflare-ipfs.com/ipns/fleek.ramsay.xyz&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;how&quot;&gt;how&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;changed the jekyll build to &lt;a href=&quot;https://developers.cloudflare.com/web3/ipfs-gateway/reference/updating-for-ipfs/#jekyll&quot;&gt;generate relative links instead of absolute links&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;deployed site using &lt;a href=&quot;https://fleek.co&quot;&gt;fleek.co&lt;/a&gt; (including setting up a dns link)&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sun, 03 Jul 2022 00:00:00 -0500</pubDate>
        <link>https://ramsay.xyz/2022/07/03/ramsay.xyz-now-on-ipfs.html</link>
        <guid isPermaLink="true">https://ramsay.xyz/2022/07/03/ramsay.xyz-now-on-ipfs.html</guid>
        
        <category>ipfs</category>
        
        
      </item>
    
      <item>
        <title>simple upstream proxy authentication for caddy</title>
        <description>&lt;h1 id=&quot;a-very-simple-upstream-proxy-authentication-for-caddy&quot;&gt;A VERY Simple upstream proxy authentication for Caddy&lt;/h1&gt;

&lt;p&gt;Moving selfhosted services from a VPS to a machine at home can be handy for saving on VPS resources (CPU, RAM, and disk space) but exposes the risk of leaking the home IP address. To protect ones home UP address, the VPS can be used as a downstream proxy to handle incoming traffic. Having the upstream server require a special header to be set by the downstream server, helps to make sure that only the downstream sever can connect to the upstream. This is quicker and easier to deploy than a VPN.&lt;/p&gt;

&lt;h2 id=&quot;code&quot;&gt;Code&lt;/h2&gt;
&lt;p&gt;(Assuming that both the upstream and downstream servers are running Caddy)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://caddyserver.com/docs/caddyfile/matchers#header&quot;&gt;DOC&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;entrypoint-caddyfile&quot;&gt;Entrypoint Caddyfile&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://selfhostedservice.ramsay.xyz {
  reverse_proxy https://selfhostedservice.rabaranks.duckdns.org {
    header_up +Random some_random_string
  }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;upstream-caddyfile&quot;&gt;Upstream Caddyfile&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://selfhostedservice.rabaranks.duckdns.org {
  @basicauth{
      header Random some_random_string
  }
  reverse_proxy @basicauth selfhostedservice:8080
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;limitations-of-this-setup&quot;&gt;Limitations of this setup&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;it does not easily scale beyond single key&lt;/li&gt;
  &lt;li&gt;security by obscurity (ie: unexpected header used)&lt;/li&gt;
  &lt;li&gt;long lived credentials (api key is being passed over the wire and rotation requires manual edits on both the upstream and downstream servers)&lt;/li&gt;
  &lt;li&gt;since using non-standard http header, it could easily show up in server logs&lt;/li&gt;
  &lt;li&gt;creds are stored in plain text within caddyfile&lt;/li&gt;
  &lt;li&gt;upstream server will still accept direct requests + responds with blank response (indicating that something is running there + the domain name is valid)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;improvements&quot;&gt;improvements&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cloudflare.com/learning/access-management/what-is-mutual-tls/&quot;&gt;mutual TLS&lt;/a&gt; (ref &lt;a href=&quot;https://caddyserver.com/docs/caddyfile/directives/tls#client_auth&quot;&gt;Caddyfile config&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;better-alternatives&quot;&gt;(Better) Alternatives&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://tailscale.com/&quot;&gt;Tailscale&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cloudflare.com/en-ca/products/tunnel/&quot;&gt;Cloudflare Tunnels&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/awesome-foss/awesome-sysadmin#vpn&quot;&gt;VPN&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 09 May 2022 00:00:00 -0500</pubDate>
        <link>https://ramsay.xyz/2022/05/09/simple-upstream-proxy-authentication-for-caddy.html</link>
        <guid isPermaLink="true">https://ramsay.xyz/2022/05/09/simple-upstream-proxy-authentication-for-caddy.html</guid>
        
        <category>caddy</category>
        
        <category>security</category>
        
        
      </item>
    
      <item>
        <title>release of blue-green-static-aws-edge</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://github.com/BASED-EDGE/blue-green-static-aws-edge&quot;&gt;REPO&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This repo contains a sample reference AWS CDK stack for setting up a blue green deployed serverless distribution.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;A sample React javascript application is (async) chunked by webpack with a distinct buildId included in the publicPath. The cdk stack deploys the web assets to S3 (using the buildId as a the subfolder) as well as update the edge lambda to a new version with the latest buildId. AWS Code Deploy then slowly switches traffic b/w the old lambda and the new lambda. As users visit the page, they will be progressively more likely to see the new version over the old version until the deployment successfully completes. To reduce origin latency for users far away from us-east-1, a route53 latency based TXT record is used to redirect the s3Origin request to the closet s3 bucket (that contains all the same assets).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;If something were to go wrong with the latest assets, (ie: code bug), the code deployment would fail and revert to the old version. Since the javascript entry should never be cached, any users who were served the bad version will get the old version after reloading the page. The same rollback action could be manually performed if an issue was discovered after the deployment completed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;The major down side with this approach is having to invoke a lambda every time a user loads the widget. This can lead to incurring Lambda costs, depending the level of traffic the app receives. These costs can be lower (or more operationally acceptable) than running comparable server(s) 24/7.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Another issue is incurring addition costs from always having to fetch the index.js. This will incur a financial cost in terms of S3 GET requests as well as a performance cost of always having to fetch the asset from us-east-1 (the sample client app aggressively asynchronously loads everything in the index to minimize its size at build time and ensure that most of the app is cached at the edge by CloudFront). Using Route53 latency routing, the edge lambda was upgraded to redirect the origin request to the closest aws region + replicated bucket, to reduce distance based latency. Yet again, this introduces more (possible) line items to the AWS bill in terms of additional storage costs and DNS queries, but these should be pretty minor.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blue-green-static-aws-edge.drawio.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Wed, 05 Jan 2022 00:00:00 -0600</pubDate>
        <link>https://ramsay.xyz/2022/01/05/release-of-blue-green-static-aws-edge.html</link>
        <guid isPermaLink="true">https://ramsay.xyz/2022/01/05/release-of-blue-green-static-aws-edge.html</guid>
        
        <category>aws</category>
        
        <category>cdk</category>
        
        <category>serverless</category>
        
        <category>basededge.dev</category>
        
        
      </item>
    
      <item>
        <title>trashhalo/reddit-rss now support custom reddit alternative UIs</title>
        <description>&lt;p&gt;My &lt;a href=&quot;https://github.com/trashhalo/reddit-rss/pull/36&quot;&gt;PR&lt;/a&gt; was merged back in November 2021.&lt;/p&gt;

&lt;p&gt;It allows redditt-rss to serve as an improved rss feed that links to &lt;a href=&quot;https://libredd.it/&quot;&gt;libredd.it&lt;/a&gt; (simple and lightweight reddit UI) or a selfhosted version.&lt;/p&gt;

&lt;p&gt;Why not just use &lt;a href=&quot;https://teddit.net/&quot;&gt;teddit.net&lt;/a&gt; rss support?&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;They serve up the same limited reddit rss item (tinny thumbnail and no further content). trashhalo/reddit-rss will attempt to pull the actual content into the rss item.&lt;/li&gt;
  &lt;li&gt;I have found the teddit pages to take a while to load. libredd.it is much faster since it contains no JS and it does not attempt to save assets to disk.&lt;/li&gt;
  &lt;li&gt;I do not have any need to interact with reddit, so the js is completely unnecessary to me&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Wed, 05 Jan 2022 00:00:00 -0600</pubDate>
        <link>https://ramsay.xyz/2022/01/05/reddit-rss.html</link>
        <guid isPermaLink="true">https://ramsay.xyz/2022/01/05/reddit-rss.html</guid>
        
        <category>rss</category>
        
        <category>reddit</category>
        
        <category>libredd</category>
        
        
      </item>
    
  </channel>
</rss>
